#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75>;
        };

        td_quote: td_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp LS(SQT)>;
        };

        td_backspace: td_backspace {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            tapping-term-ms = <300>;
        };

        layer_kp: layer_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <65>;
            hold-trigger-on-release;
            flavor = "balanced";
            quick-tap-ms = <180>;
        };

        td_bslash: td_bslash {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BSLASH";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp BACKSLASH>, <&kp LS(BACKSLASH)>;
        };
    };

    macros {
    };

    combos {
        compatible = "zmk,combos";

        sleep {
            bindings = <&kp LG(LA(K_SLEEP))>;
            key-positions = <67 68>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <17 24>;
        };

        underscore {
            bindings = <&kp LS(MINUS)>;
            key-positions = <18 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp EQUAL      &kp N1             &kp N2           &kp N3           &kp N4               &kp N5  &trans                                                                     &mo 3                  &kp N6  &kp N7               &kp N8            &kp N9            &kp N0              &kp MINUS
&kp TAB        &kp Q              &kp W            &kp F            &kp P                &kp B   &none                                                                      &none                  &kp J   &kp L                &kp U             &kp Y             &kp SEMICOLON       &td_bslash
&kp BACKSPACE  &hml LEFT_SHIFT A  &hml LEFT_GUI R  &hml LEFT_ALT S  &hml LEFT_CONTROL T  &kp G   &none              &kp LA(SPACE)       &kp LALT      &kp LGUI   &kp RCTRL  &none                  &kp M   &hmr LEFT_CONTROL N  &hmr RIGHT_ALT E  &hmr RIGHT_GUI I  &hmr RIGHT_SHIFT O  &td_quote
&kp ESCAPE     &kp Z              &kp X            &kp C            &kp D                &kp V                                          &kp HOME      &kp PG_UP                                    &kp K   &kp H                &kp COMMA         &kp PERIOD        &kp SLASH           &kp ENTER
&mo 4          &kp GRAVE          &kp CAPS         &trans           &mo 2                        &layer_kp 1 SPACE  &mt LEFT_SHIFT TAB  &kp END       &kp PG_DN  &kp ENTER  &layer_kp 3 BACKSPACE          &caps_word           &trans            &kp LBKT          &kp RBKT            &mo 4
            >;
        };

        keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4  &kp N5  &trans                                                 &mo 3      &kp N6          &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R   &kp T   &none                                                  &none      &kp Y           &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F   &kp G   &none   &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H           &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V   &kp B                      &kp HOME      &kp PG_UP                        &kp KP_NUMLOCK  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &trans          &trans  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0                  &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2                &kp F3                 &kp F4            &kp F5             &kp F6  &tog 1                                      &mo 3   &kp F7    &kp F8    &kp F9        &kp F10    &kp F11  &kp F12
&trans  &trans                &trans                 &trans            &trans             &trans  &none                                       &none   &trans    &trans    &trans        &trans     &trans   &trans
&trans  &trans                &td_bslash             &kp LS(N9)        &kp LS(N0)         &trans  &none   &trans  &trans      &trans  &trans  &none   &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans   &trans
&trans  &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans                  &trans      &trans                  &trans    &trans    &trans        &trans     &trans   &trans
&trans  &trans                &trans                 &trans            &trans                     &trans  &trans  &trans      &trans  &trans  &trans            &trans    &trans        &trans     &trans   &trans
            >;
        };

        mod {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                        &trans       &none  &none       &none       &none  &none  &none
&none       &none         &none         &none         &none         &none         &bootloader                                  &bootloader  &none  &none       &none       &none  &none  &none
&none       &none         &none         &none         &none         &none         &none        &none  &none      &none  &none  &none        &none  &none       &none       &none  &none  &none
&none       &none         &none         &none         &macro_ver    &none                             &none      &none                      &none  &none       &none       &none  &none  &none
&none       &none         &none         &none         &none                       &none        &none  &none      &none  &none  &trans              &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        app {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
